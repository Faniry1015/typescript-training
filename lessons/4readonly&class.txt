//Readonly
function reverse<T>(arr: readonly T[]): T[] {
   //la propriété en entrée ne doit pas être modifiée, on doit créer un nouvel objet
   return [...arr].reverse();
}

//Classes
class A {
   constructor(public e: Number) {
      this.e = e;
   }
   private a = 3; //ne peut être accéder qu'à l'intérieur de la classe et dans la méthode de la classe
   #d = 4; //Propriété private qui n'est pas du typescript mais une syntaxe récente du JS et qui est plus sécurisé
   protected b = 2; // presque comme private sauf que les enfants peuvent y accéder
   public c = 1; // par défaut, n'a pas besoin d'être déclaré

   log() {
      console.log(this.a);
      console.log(this.e);
   }
}

class B extends A {
   logb() {
      console.log(this.b);
   }
}

const aInstance = new A(1);
aInstance.log();

const bInstance = new B(2);
bInstance.logb();

class Collection<T> {
   constructor(private items: T[]) {
      this.items = items;
   }

   first(): T | null {
      return this.items[0] || null;
   }

   add(item: T): this {
      //la même instance qui est renvoyé
      this.items.push(item);
      return this;
   }
}

const a = new Collection(["a", "b"]);
const b = a.first();

class Subscriber {
   // on(this: HTMLInputElement, name: string, cb: Function) {  //veux dire changer le sens de this

   // } ou
   on = (name: string, cb: Function) => {};
}

//next exemple
class Point {
   x = 0;
   y = 0;
}

class Geometry {
   x = 0;
   y = 0;
   surface = 0;
}

function getX(p: Point) {
   return p.x;
}

getX(new Geometry()); // accepte tout ce qui ont une propriété x (ce qui est étrange)

//next example
abstract class Geometry2 {
   x = 0;
   y = 0;
   abstract surface(): number;
}

class Triangle extends Geometry2 {
   // pour que la classe soit concrète, il faut qu'elle implémente toutes les méthodes de la classe parente (force l'implémentation des méthodes abstraites)
   x = 2;
   y = 2;
   surface() {
      return this.x * this.y;
   }
}

//next static
class Geometry3 {
   static #origin: {x: number, y: number} = { x: 0, y: 0 };  //Static est du JS pas spécifique au TS

   constructor (x: number, y: number) {

   }

   surface() {
    return 3
   }
}

class Triangle3 {
    constructor (x: number, y: number) {

    }
    surface() {
        return 3
       }
}

type InstantiableShape = {
    new (x: number, y: number): {
        surface: () => number
    } 
}

function shapeGenerator (shapeType: InstantiableShape, x : number, y: number) {
    return new shapeType(x, y).surface()
}

shapeGenerator (Geometry3, 10, 20)
shapeGenerator (Triangle3, 10, 20)